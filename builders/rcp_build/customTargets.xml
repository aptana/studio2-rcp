<project name="Build specific targets and properties" default="noDefault">

	<!-- ===================================================================== -->
	<!-- Run a given ${target} on all elements being built -->
	<!-- Add on <ant> task for each top level element being built. -->
	<!-- ===================================================================== -->
	<available property="allElementsFile" file="${builder}/allElements.xml" value="${builder}/allElements.xml" />
	<property name="allElementsFile" location="${eclipse.pdebuild.templates}/headless-build/allElements.xml" />

	<import file="${allElementsFile}" />
	<target name="allElements">
		<antcall target="allElementsDelegator" />
	</target>

	<!-- ===================================================================== -->
	<!-- ===================================================================== -->
	<target name="getBaseComponents" depends="checkLocalBase" unless="skipBase">
		<get src="${eclipseBaseURL}" dest="${buildDirectory}/../temp-base.zip" />
		<unzip dest="${base}" overwrite="true" src="${buildDirectory}/../temp-base.zip" />
	</target>

	<target name="checkLocalBase">
		<available file="${base}" property="skipBase" />
	</target>

	<!-- ===================================================================== -->
	<!-- Check out map files from correct repository -->
	<!-- Replace values for mapsCheckoutTag as desired. -->
	<!-- ===================================================================== -->
	<target name="getMapFiles" depends="checkLocalMaps" unless="skipMaps">
		<property name="mapsCheckoutTag" value="HEAD" />
		<cvs cvsRoot="${mapsRepo}" package="${mapsRoot}" dest="${buildDirectory}/maps" tag="${mapsCheckoutTag}" />
	</target>

	<target name="checkLocalMaps">
		<available property="skipMaps" file="${buildDirectory}/maps" />
	</target>

	<target name="tagMapFiles" if="tagMaps">
		<cvs dest="${buildDirectory}/maps/${mapsRoot}" command="tag ${mapsTagTag}" />
	</target>

	<!-- ===================================================================== -->

	<target name="clean" unless="noclean">
		<antcall target="allElements">
			<param name="target" value="cleanElement" />
		</antcall>
	</target>

	<target name="gatherLogs">
		<mkdir dir="${buildDirectory}/${buildLabel}/compilelogs" />
		<antcall target="allElements">
			<param name="target" value="gatherLogs" />
		</antcall>
		<unzip dest="${buildDirectory}/${buildLabel}/compilelogs" overwrite="true">
			<fileset dir="${buildDirectory}/features">
				<include name="**/*.log.zip" />
			</fileset>
		</unzip>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<antcall target="replaceVersions" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after setup but before starting the build proper -->
	<!-- ===================================================================== -->
	<target name="postSetup">
		<antcall target="getBaseComponents" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="preFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after fetching the build elements -->
	<!-- ===================================================================== -->
	<target name="postFetch">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
	</target>

	<target name="replaceVersions">
		<tstamp>
			<format property="timestamp" pattern="dd MMMM yyyy, HH:mm:ss" locale="en" />
		</tstamp>
		<tstamp>
			<format property="short.timestamp" pattern="ddMMyyyyHHmmss" locale="en" />
		</tstamp>
		<echo message="Updating versions in feature and plugin manifests. Full version: ${version.full}, qualifier: ${build.revision}" />
		<!-- Replace very specific files (taken from our old build) -->
		<replace file="${buildDirectory}/plugins/com.aptana.ide.rcp/ide.product" token="0.0.0.qualifier" value="${version.full}-${short.timestamp}" />
		<replace file="${buildDirectory}/plugins/com.aptana.ide.rcp/plugin.properties" token="0.0.0.qualifier" value="${version.full}" />
		<replace file="${buildDirectory}/plugins/com.aptana.ide.rcp/plugin.properties" token="%timestamp%" value="${timestamp}" />
		<replace file="${buildDirectory}/features/com.aptana.ide.feature.rcp/feature.properties" token="build.name" value="${build.name}" />
		<replace file="${buildDirectory}/features/com.aptana.ide.feature.rcp.wrapper/feature.properties" token="build.name" value="${build.name}" />
		<replace file="${buildDirectory}/features/com.aptana.ide.feature.rcp.wrapper/rootfiles/version.txt" token="0.0.0" value="${version.full}" />
		<replace file="${buildDirectory}/features/com.aptana.ide.feature.rcp.wrapper/rootfiles/version.txt" token=".qualifier" value="${build.revision}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="postGenerate">
		<antcall target="clean" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="preProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after running the build.xmls for the elements being built. -->
	<!-- ===================================================================== -->
	<target name="postProcess">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running assemble. -->
	<!-- ===================================================================== -->
	<target name="preAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running assemble. -->
	<!-- ===================================================================== -->
	<target name="postAssemble">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after  running package. -->
	<!-- ===================================================================== -->
	<target name="postPackage">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do after the build is done. -->
	<!-- ===================================================================== -->
	<target name="postBuild">
		<antcall target="gatherLogs" />
		<antcall target="modify.binaries" />
		<antcall target="fix.broken.metadata" />
		<antcall target="updateSite" />
		<antcall target="publish" />
	</target>

	<target name="modify.binaries">
		<!-- TODO Fix config.ini on other platforms! -->
		<!-- Unzip the macosx launcher to a temp dir... -->
		<!-- carbon -->
		<pathconvert property="mac.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.carbon.macosx.ppc_*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="mac.launcher.dir" location="${buildDirectory}/tmp_mac_launcher/${mac.launcher}" />
		<mkdir dir="${mac.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${mac.launcher}" dest="${mac.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${mac.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${mac.launcher.dir}/configuration/config.ini" append="yes" eol="mac">
			<filelist dir="${builder}/custom/macosx/" files="config.ini" />
		</concat>
		<copy file="${builder}/custom/macosx/Info.plist" tofile="${mac.launcher.dir}/AptanaStudio.app/Contents/Info.plist" overwrite="true" />
		<copy file="${builder}/custom/macosx/AptanaStudio" tofile="${mac.launcher.dir}/AptanaStudio.app/Contents/MacOS/AptanaStudio" overwrite="true" />
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${mac.launcher}">
			<fileset dir="${mac.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${mac.launcher.dir}" />
		
		<!-- cocoa -->
		<pathconvert property="mac.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.cocoa.macosx.x86_*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="mac.launcher.dir" location="${buildDirectory}/tmp_mac_launcher/${mac.launcher}" />
		<mkdir dir="${mac.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${mac.launcher}" dest="${mac.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${mac.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${mac.launcher.dir}/configuration/config.ini" append="yes" eol="mac">
			<filelist dir="${builder}/custom/macosx/" files="config.ini" />
		</concat>
		<copy file="${builder}/custom/macosx/Info.plist" tofile="${mac.launcher.dir}/AptanaStudio.app/Contents/Info.plist" overwrite="true" />
		<copy file="${builder}/custom/macosx/AptanaStudio" tofile="${mac.launcher.dir}/AptanaStudio.app/Contents/MacOS/AptanaStudio" overwrite="true" />
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${mac.launcher}">
			<fileset dir="${mac.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${mac.launcher.dir}" />

		<!-- =========== Windows Mangling ==================================================== -->
		<!-- Unzip the launcher to a temp dir... -->
		<pathconvert property="win32.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.win32.win32.x86_1*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="win32.launcher.dir" location="${buildDirectory}/tmp_win32_launcher/${win32.launcher}" />
		<mkdir dir="${win32.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${win32.launcher}" dest="${win32.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${win32.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${win32.launcher.dir}/configuration/config.ini" append="yes" eol="dos">
			<filelist dir="${builder}/custom/win32/" files="config.ini" />
		</concat>
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${win32.launcher}">
			<fileset dir="${win32.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${win32.launcher.dir}" />
		
		<!-- =========== Windows 64-bit Mangling ==================================================== -->
		<!-- Unzip the launcher to a temp dir... -->
		<pathconvert property="win64.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.win32.win32.x86_64_*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="win64.launcher.dir" location="${buildDirectory}/tmp_win64_launcher/${win64.launcher}" />
		<mkdir dir="${win64.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${win64.launcher}" dest="${win64.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${win64.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${win64.launcher.dir}/configuration/config.ini" append="yes" eol="dos">
			<filelist dir="${builder}/custom/win32/" files="config.ini" />
		</concat>
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${win64.launcher}">
			<fileset dir="${win64.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${win64.launcher.dir}" />

		<!-- =========== Linux 32-bit Mangling ==================================================== -->
		<!-- Unzip the launcher to a temp dir... -->
		<pathconvert property="linux.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.gtk.linux.x86_1*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="linux.launcher.dir" location="${buildDirectory}/tmp_linux_launcher/${linux.launcher}" />
		<mkdir dir="${linux.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${linux.launcher}" dest="${linux.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${linux.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${linux.launcher.dir}/configuration/config.ini" append="yes" eol="unix">
			<filelist dir="${builder}/custom/linux/" files="config.ini" />
		</concat>
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${linux.launcher}">
			<fileset dir="${linux.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${linux.launcher.dir}" />

		<!-- =========== Linux 64-bit Mangling ==================================================== -->
		<!-- Unzip the launcher to a temp dir... -->
		<pathconvert property="linux_64.launcher">
			<fileset dir="${p2.repo.dir}/binary">
				<include name="com.aptana.ide.rcp.product.launcher.gtk.linux.x86_64_*" />
			</fileset>
			<mapper>
				<flattenmapper />
			</mapper>
		</pathconvert>
		<property name="linux_64.launcher.dir" location="${buildDirectory}/tmp_linux_64_launcher/${linux_64.launcher}" />
		<mkdir dir="${linux_64.launcher.dir}" />
		<unzip src="${p2.repo.dir}/binary/${linux_64.launcher}" dest="${linux_64.launcher.dir}" />
		<delete file="${p2.repo.dir}/binary/${linux_64.launcher}" />
		<!-- ...add our custom modifications... -->
		<concat destfile="${linux_64.launcher.dir}/configuration/config.ini" append="yes" eol="unix">
			<filelist dir="${builder}/custom/linux/" files="config.ini" />
		</concat>
		<!-- ...then re-zip and delete the temp dir -->
		<zip destfile="${p2.repo.dir}/binary/${linux_64.launcher}">
			<fileset dir="${linux_64.launcher.dir}" defaultexcludes="false" />
		</zip>
		<delete dir="${linux_64.launcher.dir}" />
	</target>

	<!-- The generated p2 metadata is broken due to a bug in Eclipse. We need to manually add entries for Mac OS X' launcher. -->
	<target name="fix.broken.metadata">
		<!-- Unzip the content.jar -->
		<unzip dest="${p2.repo.dir}" src="${p2.repo.dir}/content.jar" />
		<delete file="${p2.repo.dir}/content.jar" />
		<!-- Add the Mac launcher metadata to content.xml -->
		<!-- Only needed for Eclipse 3.4
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
					<replacetoken><![CDATA[<unit id='com.aptana.ide.rcp.product.launcher.win32.win32.x86.AptanaStudio.exe']]></replacetoken>
					<replacevalue><![CDATA[<unit id='com.aptana.ide.rcp.product.launcher.carbon.macosx.ppc.AptanaStudio' version='{version.full}' singleton='false'>
		  <provides size='1'>
		    <provided namespace='org.eclipse.equinox.p2.iu' name='com.aptana.ide.rcp.product.launcher.carbon.macosx.ppc.AptanaStudio' version='{version.full}' />
		  </provides>
		  <filter>
		    (&amp; (osgi.os=macosx)(osgi.ws=carbon)(osgi.arch=ppc))
		  </filter>
		  <touchpoint id='org.eclipse.equinox.p2.osgi' version='1.0.0' />
		  <touchpointData size='1'>
		    <instructions size='2'>
		      <instruction key='unconfigure'>
		        setLauncherName()
		      </instruction>
		      <instruction key='configure'>
		        setLauncherName(name:AptanaStudio)
		      </instruction>
		    </instructions>
		  </touchpointData>
		</unit>
		<unit id='com.aptana.ide.rcp.product.launcher.win32.win32.x86.AptanaStudio.exe']]></replacevalue>
	  </replace>		
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
				<replacetoken><![CDATA[<required namespace='org.eclipse.equinox.p2.iu' name='com.aptana.ide.rcp.product.launcher.gtk.linux.x86_64.AptanaStudio']]></replacetoken>
				<replacevalue><![CDATA[<required namespace='org.eclipse.equinox.p2.iu' name='com.aptana.ide.rcp.product.launcher.carbon.macosx.ppc.AptanaStudio' range='[{version.full},{version.full}]'>
          <filter>
            (&amp; (osgi.os=macosx)(osgi.ws=carbon)(osgi.arch=ppc))
          </filter>
		</required>
        <required namespace='org.eclipse.equinox.p2.iu' name='com.aptana.ide.rcp.product.launcher.gtk.linux.x86_64.AptanaStudio']]></replacevalue>
			</replace>
		<replace summary="yes" file="${p2.repo.dir}/content.xml" token="{version.full}" value="${version.full}" />
		-->
		<!-- Fix the broken OSGi filter syntax (workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=271373)-->
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.arch=x86,x86_64)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.arch=x86)(osgi.arch=x86_64))]]></replacevalue>
		</replace>
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.os=macosx,win32)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.os=macosx)(osgi.os=win32))]]></replacevalue>
		</replace>
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.ws=carbon, cocoa)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.ws=carbon)(osgi.ws=cocoa))]]></replacevalue>
		</replace>		
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken><![CDATA[(osgi.os=aix,hpux,linux,qnx,solaris)]]></replacetoken>
			<replacevalue><![CDATA[(| (osgi.os=aix)(osgi.os=hpux)(osgi.os=linux)(osgi.os=qnx)(osgi.os=solaris))]]></replacevalue>
		</replace>
		<!-- Fix the broken unconfigure of a product launcher (workaround for https://bugs.eclipse.org/bugs/show_bug.cgi?id=280007)-->
		<replace summary="yes" file="${p2.repo.dir}/content.xml">
			<replacetoken>setLauncherName()</replacetoken>
			<replacevalue></replacevalue>
		</replace>
		<!-- Re-zip content.xml into content.jar -->
		<zip destfile="${p2.repo.dir}/content.jar">
			<zipfileset dir="${p2.repo.dir}">
				<include name="content.xml" />
			</zipfileset>
		</zip>
		<delete file="${p2.repo.dir}/content.xml" />
	</target>

	<target name="updateSite">
		<copy file="${builder}/update_site/site.xml" tofile="${p2.repo.dir}/site.xml" />
		<pathconvert property="site.version.full">
			<fileset dir="${p2.repo.dir}/features">
				<include name="com.aptana.ide.feature.rcp_*.jar" />
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="com.aptana.ide.feature.rcp_*.jar" to="*" casesensitive="yes" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<replace token="{version.full}" value="${site.version.full}" file="${p2.repo.dir}/site.xml" />
		<zip destfile="${buildDirectory}/${topLevelElementId}-${version.full}.zip">
			<fileset dir="${p2.repo.dir}" defaultexcludes="false" />
		</zip>
		<move file="${buildDirectory}/${topLevelElementId}-${version.full}.zip" todir="${p2.repo.dir}" />
		<copy file="${builder}/update_site/index.html" tofile="${p2.repo.dir}/index.html" />
		<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${p2.repo.dir}/index.html" />

		<!-- Copy over messages.php files -->
		<copy file="${builder}/update_site/messages.php" tofile="${p2.repo.dir}/messages.php" />
		<copy file="${builder}/update_site/.htaccess" tofile="${p2.repo.dir}/.htaccess" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to test the build results -->
	<!-- ===================================================================== -->
	<target name="test">
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do to publish the build results -->
	<!-- ===================================================================== -->
	<target name="publish">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<copy todir="${deploy.dir}" failonerror="true">
			<fileset dir="${p2.repo.dir}" />
		</copy>
	</target>

	<!-- ===================================================================== -->
	<!-- Default target                                                        -->
	<!-- ===================================================================== -->
	<target name="noDefault">
		<echo message="You must specify a target when invoking this file" />
	</target>

</project>