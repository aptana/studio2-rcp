<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 
     Sep                                                        

     Studio    
     Builds the Studio feature
                   
     cwilliams                                                                
     ====================================================================== -->
<project name="Studio" default="build">
	<description>
            Builds the Studio feature
    </description>

	<property environment="env" />
	<property file="build_local.properties" />
	<!-- Set is.windows property IF the OS is from the Windows family -->
	<condition property="is.windows" value="true">
		<os family="windows" />
	</condition>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<property file="build_local.properties" />

	<!-- ================================= 
          target: build              
         ================================= -->
	<target name="build" description="Builds the Studio feature" depends="generate.build.properties,get.revision,replace.versions,generate.base">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/build.xml -Dbuilder=${basedir} -Dbuild.revision=${build.revision} -nosplash" />
		</java>
		<antcall target="categorize" />
		<antcall target="buildZip" />
		<antcall target="clean.after" />
	</target>

	<!-- ================================= 
          target: generate.build.properties              
         ================================= -->
	<target name="generate.build.properties" description="Takes in properties from build_local.properties and the command line overrides and generates a combined build.properties to use for the build">
		<echoproperties destfile="build.properties">
			<propertyset negate="true">
				<propertyref prefix="java." />
				<propertyref prefix="ant." />
				<propertyref prefix="awt." />
				<propertyref prefix="user." />
				<propertyref prefix="sun." />
			</propertyset>
		</echoproperties>
	</target>

	<!-- ================================= 
          target: categorize              
         ================================= -->
    <target name="categorize" description="categorize the update site">
    	<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="yes">
    		<arg line="-application org.eclipse.equinox.p2.publisher.CategoryPublisher -nosplash -console -consolelog -metadataRepository file:${deploy.dir} -categoryDefinition file:${deploy.dir}/site.xml" />
    	</java>
    	<!-- Re-JAR the content.xml file! -->
    	<jar destfile="${deploy.dir}/content.jar">
    		<fileset file="${deploy.dir}/content.xml" />
    	</jar>
    	<delete file="${deploy.dir}/content.xml" />
    </target>

	<!-- ================================= 
          target: buildZip           
         ================================= -->
	<target name="buildZip" depends="generate.build.properties" description="Build the update site zip">
		<pathconvert property="version.full">
			<fileset dir="${p2.repo.dir}/features">
				<include name="${topLevelElementId}_*.jar" />
			</fileset>
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="${topLevelElementId}_*.jar" to="*" casesensitive="yes" />
				</chainedmapper>
			</mapper>
		</pathconvert>
		<zip destfile="${buildDirectory}/${topLevelElementId}-${version.full}.zip">
			<fileset dir="${deploy.dir}" defaultexcludes="false" />
		</zip>
		<move file="${buildDirectory}/${topLevelElementId}-${version.full}.zip" todir="${deploy.dir}" />
		<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${deploy.dir}/index.html" />
	</target>

	<!-- ================================= 
	      target: clean              
	     ================================= -->
	<target name="clean" depends="generate.build.properties" description="Clean up temp and build files">
		<delete failonerror="false">
			<fileset dir="${buildDirectory}" defaultexcludes="true">
				<include name="assemble.*" />
				<include name="finalFeaturesVersions.*" />
				<include name="finalPluginsVersions.*" />
				<include name="package.*" />
			</fileset>
		</delete>
		<delete dir="${buildDirectory}/${buildLabel}" failonerror="false" />
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="false">
			<arg line="-application org.eclipse.ant.core.antRunner -buildfile ${baseLocation}/plugins/${builder.plugin}/scripts/build.xml -Dbuilder=${basedir} -nosplash clean" />
		</java>
		<delete dir="${baseLocation}" />
		<delete dir="${buildDirectory}/features/org.eclipse.pde.build.container.feature" failonerror="false" />
		<delete dir="${p2.repo.dir}" failonerror="false" />
		<!-- Do a git checkout -f of the build directory -->
		<exec executable="/bin/bash" dir="${buildDirectory}">
			<arg value="-c" />
			<arg value="${git.executable} checkout -f" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	      target: clean.after                      
	     - - - - - - - - - - - - - - - - - -->
	<target name="clean.after" if="cleanAfter">
		<antcall target="clean" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: generate.base                      
         - - - - - - - - - - - - - - - - - -->
	<target name="generate.base" depends="copy.base.windows,copy.base">
		<!-- Workaround for https://bugs.eclipse.org/241430 shouldn't be necessary when we move to 3.5 -->
		<delete failonerror="false">
			<fileset dir="${baseLocation}/configuration/.settings">
				<include name="org.eclipse.equinox.p2.*.repository.prefs" />
			</fileset>
		</delete>
		<!-- Copy the features and plugins over into a dropins folder. Installing makes it so that non-linux plugins/features won't be there! -->
		<mkdir dir="${baseLocation}/dropins/eclipse" />
		<copy todir="${baseLocation}/dropins/eclipse">
			<fileset dir="${ide-core.p2.repo}" defaultexcludes="true">
				<include name="features/*" />
				<include name="plugins/*" />
			</fileset>
			<fileset dir="${secureftp.p2.repo}" defaultexcludes="true">
				<include name="features/*" />
				<include name="plugins/*" />
			</fileset>
		</copy>

		<!-- Unjar the features -->
		<for param="file">
			<path>
				<fileset dir="${baseLocation}/dropins/eclipse/features" defaultexcludes="true">
					<include name="*.jar" />
				</fileset>
			</path>
			<sequential>
				<echo message="Unzipping JAR @{file}" />
				<basename file="@{file}" property="@{file}.name" suffix="jar" />
				<mkdir dir="${baseLocation}/dropins/eclipse/features/${@{file}.name}" />
				<unjar dest="${baseLocation}/dropins/eclipse/features/${@{file}.name}" src="@{file}" />
				<delete file="@{file}" />
			</sequential>
		</for>
		<!-- UnJAR the handful of plugins that we need to... -->
		<for param="file">
			<path>
				<fileset dir="${baseLocation}/dropins/eclipse/plugins" defaultexcludes="true">
					<include name="org.mozilla.rhino_*.jar" />
					<include name="org.eclipse.atf.mozilla.ide.core_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser.carbon.macosx_*.jar" />
					<include name="org.eclipse.atf.mozilla.swt.browser.win32.win32.x86_*.jar" />
					<include name="org.mozilla.xulrunner.macosx_*.jar" />
					<include name="org.mozilla.xulrunner.win32.win32.x86_*.jar" />
					<include name="org.mozilla.xpcom_*.jar" />
					<include name="com.aptana.ide.syncing_*.jar" />
					<include name="com.aptana.ide.branding_*.jar" />
					<include name="com.aptana.ide.professional_*.jar" />
					<include name="com.aptana.ide.server.cloud_*.jar" />
					<include name="com.aptana.ide.core.win32_*.jar" />
					<include name="com.aptana.ide.libraries_*.jar" />
					<include name="com.aptana.ide.libraries.jetty_*.jar" />
					<include name="com.aptana.ide.libraries.subscription_*.jar" />
					<include name="com.aptana.ide.server.jetty_*.jar" />
					<include name="com.aptana.ide.js.docgen_*.jar" />
					<include name="org.eclipse.eclipsemonkey_*.jar" />
					<include name="com.aptana.ide.desktop.integration.protocolhandler_*.jar" />
				</fileset>
			</path>
			<sequential>
				<echo message="Unzipping JAR @{file}" />
				<basename file="@{file}" property="@{file}.name" suffix="jar" />
				<mkdir dir="${baseLocation}/dropins/eclipse/plugins/${@{file}.name}" />
				<unjar dest="${baseLocation}/dropins/eclipse/plugins/${@{file}.name}" src="@{file}" />
				<delete file="@{file}" />
			</sequential>
		</for>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
	          target: copy.base                      
	         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base" unless="is.windows">
		<!-- Copy over the original base eclipse to a new location.
						Have to use exec cp to retain permissions on *nix, Mac -->
		<exec executable="cp">
			<arg line="-R ${vanilla.eclipse} ${baseLocation}" />
		</exec>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: copy.base.windows                      
         - - - - - - - - - - - - - - - - - -->
	<target name="copy.base.windows" if="is.windows">
		<copy todir="${baseLocation}">
			<fileset dir="${vanilla.eclipse}" includes="**/*" defaultexcludes="false" />
		</copy>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
		  target: run.director                      
		 - - - - - - - - - - - - - - - - - -->
	<target name="run.director" description="Runs the p2 director installs">
		<java jar="${baseLocation}/plugins/${launcher.plugin}.jar" fork="true" failonerror="true" dir="${baseLocation}" timeout="900000">
			<arg line="-application org.eclipse.equinox.p2.director.app.application" />
			<arg line="-nosplash" />
			<arg line="-consoleLog" />
			<arg line="-metadataRepository ${p2.repo}" />
			<arg line="-artifactRepository ${p2.repo}" />
			<arg line="-installIU ${p2.installIU}" />
		</java>
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
          target: get.revision                      
         - - - - - - - - - - - - - - - - - -->
	<target name="get.revision">
		<echo message="Retrieving Git timestamp for latest revision" level="info" />
		<exec executable="/bin/bash" dir="${basedir}" outputproperty="git.revision.max">
			<arg value="-c" />
			<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct'" />
		</exec>
		<property name="build.revision" value="${git.revision.max}" />
		<echo message="Revision timestamp: ${build.revision}" level="info" />
	</target>

	<!-- - - - - - - - - - - - - - - - - -
	      target: replace.versions
	     - - - - - - - - - - - - - - - - - -->
	<target name="replace.versions" description="Replaces all the qualifiers for plugins/features with the last changed rev for that plugin/feature.">
		<!-- Iterate through every plugin and feature directory and replace qualifier in
		        build.properties with qualifier for just that plugin/feature! -->
		<!-- TODO Handle if build.properties has no qualifier entry! -->
		<for param="file">
			<path>
				<dirset dir="${buildDirectory}" defaultexcludes="true">
					<include name="plugins/*" />
					<include name="features/*" />
					<exclude name="${topLevelElementType}s/${topLevelElementId}" />
				</dirset>
			</path>
			<sequential>
				<exec executable="/bin/bash" dir="@{file}" outputproperty="@{file}.committed.max">
					<arg value="-c" />
					<arg value="${git.executable} log --max-count=1 --pretty=format:'%ct' ." />
				</exec>
				<echo message="Replacing qualifier for @{file} with ${@{file}.committed.max}" />
				<replaceregexp file="@{file}/build.properties" match="qualifier\s*=\s*context" replace="qualifier = ${@{file}.committed.max}" byline="true" />
			</sequential>
		</for>
	</target>
	
	<target name="create-artifact-symlink">
		<exec executable="unlink">
	    	<arg value="${env.WORKSPACE}/build-artifacts" />
	    </exec>
	    <symlink link="${env.WORKSPACE}/build-artifacts" resource="${deploy.dir}" failonerror="false"/>
	</target>

</project>
